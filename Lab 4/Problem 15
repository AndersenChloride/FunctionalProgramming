module Main (main) where

main :: IO ()
main = do print $ show (intReplica [1, 2, 3, 4, 5] 3)
          print $ show (intReplica [3, 2, 2] 2)

myFoldr :: (a -> b -> b) -> b -> [a] -> b
myFoldr con temp = \x -> case x of
    a:as    -> a `con` myFoldr con temp as
    []      -> temp  


intReplica :: [a] -> Int -> [a]
intReplica [] _ = []
intReplica (x:xs) s = myFoldr (const (x:)) (intReplica xs s) [1..s]
